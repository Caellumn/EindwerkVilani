{
    "openapi": "3.0.0",
    "info": {
        "title": "Kapsalon Vilani API",
        "description": "API for managing a hair salon's services, products, and appointments",
        "contact": {
            "email": "info@kapsalonvilani.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "/api",
            "description": "API Server"
        }
    ],
    "paths": {
        "/api/bookings": {
            "get": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Get a list of bookings with optional filters",
                "description": "Returns a list of bookings. Can filter by date (year, month, day), name, gender, and status",
                "operationId": "getBookingsList",
                "parameters": [
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter bookings by year",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 2023
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "description": "Filter bookings by month (1-12)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 6
                        }
                    },
                    {
                        "name": "day",
                        "in": "query",
                        "description": "Filter bookings by day of month (1-31)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 15
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter bookings by customer name (partial match)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "John"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Filter bookings by customer gender (male or female only)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "male",
                                "female"
                            ],
                            "example": "male"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter bookings by status (pending, confirmed, cancelled, or completed only)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "confirmed",
                                "cancelled",
                                "completed"
                            ],
                            "example": "pending"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Booking"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error for query parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message describing the validation failure",
                                            "type": "string",
                                            "example": "status needs to be pending, confirmed, cancelled or completed"
                                        }
                                    },
                                    "type": "object"
                                },
                                "examples": {
                                    "status_error": {
                                        "summary": "Invalid status parameter",
                                        "value": {
                                            "error": "status needs to be pending, confirmed, cancelled or completed or gender needs to be male or female"
                                        }
                                    },
                                    "gender_error": {
                                        "summary": "Invalid gender parameter",
                                        "value": {
                                            "error": "gender needs to be male or female"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking",
                "description": "Creates a new booking with the provided information. Supports custom date formats like '2023-12-10 10h20m' or '2023/12/4 10h30m'.",
                "operationId": "createBooking",
                "requestBody": {
                    "description": "Booking data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "date": [
                                                    "The date field is required."
                                                ],
                                                "gender": [
                                                    "The selected gender is invalid."
                                                ],
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while creating the booking."
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "Error details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/{id}": {
            "get": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Get booking by ID",
                "description": "Returns a single booking by ID with associated user details",
                "operationId": "getBookingById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the booking to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Cancel a booking",
                "description": "Cancels a booking by setting its status to 'cancelled'",
                "operationId": "cancelBooking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the booking to cancel",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Booking cancelled successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Update an existing booking",
                "description": "Updates a booking with the provided information. At least one field must be provided.",
                "operationId": "updateBooking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the booking to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Booking update data - at least one field must be provided",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookingUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Booking updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking or User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "At least one field to update must be provided"
                                        },
                                        "errors": {
                                            "properties": {
                                                "fields": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Please include at least one of: date, name, email, telephone, gender, remarks, status"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "description": "Display a listing of the resource.",
                "operationId": "34d7068e4b49cdbb56a6cc139afc6606",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Category Name"
                                            },
                                            "active": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No categories found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No categories were found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Creates a new category. Only the name field is mandatory, active is optional.",
                "operationId": "6d86fd89cd9f60b1f92c7f637c1edf9c",
                "requestBody": {
                    "description": "Category data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Category name (Required)",
                                        "type": "string",
                                        "example": "New Category"
                                    },
                                    "active": {
                                        "description": "Category status (Optional, default: 1)",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "New Category"
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error - Invalid or missing fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The name field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required"
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{categoryId}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a specific category by ID",
                "description": "Display the specified resource.",
                "operationId": "2c0b951408486bb189a8383a6815e40a",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "ID of category to return",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Category Name"
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update an existing category",
                "description": "Updates an existing category. name is required.",
                "operationId": "efe20add4caf85f69a24e3c4949d7a16",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "ID of category to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Category data. name is required.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Category Name"
                                    },
                                    "active": {
                                        "description": "Optional field",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Updated Category Name"
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error - Invalid fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field must be unique"
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Deactivate a category (soft delete)",
                "description": "Remove the specified resource from storage.",
                "operationId": "43925e52eec4d6ea125403aa6cac3a40",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "ID of category to deactivate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deactivated successfully"
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{productId}/categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all categories for a product",
                "operationId": "3aabc98abfa08dd6f9aa8a3e4cfeb27f",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "ID of product",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of product categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Category Name"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{productId}/categories/sync": {
            "put": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Sync categories for a product (replace all existing with the provided set)",
                "operationId": "a3bc4ab14f37d487897085a314edb626",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "ID of product",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Add and remove categories. Send an array of category ids to add and/or change the current categories, send an empty array to remove all.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "categories"
                                ],
                                "properties": {
                                    "categories": {
                                        "description": "Array of category IDs. Send an empty array [] to remove all categories.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Categories synced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Categories synced successfully"
                                        },
                                        "product": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Product Name"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Product description"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 99.99
                                                },
                                                "stock": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "categories": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Category Name"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found or category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product not found"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "categories.0": [
                                                    "The selected categories.0 is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error - Missing or invalid fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The categories field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "categories": [
                                                    "The categories field is required"
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products-with-categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all products with their associated categories",
                "operationId": "af391520aaa2d7baa51c2b38f2f7834d",
                "responses": {
                    "200": {
                        "description": "List of products with their categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Product Name"
                                            },
                                            "categories": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Category Name"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/product-categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all categories that are associated with any products",
                "operationId": "23ca46d2d95120c1f2042bfb48a12fdb",
                "responses": {
                    "200": {
                        "description": "List of category names used by products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "Category Name"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "description": "Returns list of all products",
                "operationId": "c1ff6f862214e1896c59cfe0491ce0e8",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Creates a new product and returns the product details",
                "operationId": "399770d33fa4672f1216707d0e236763",
                "requestBody": {
                    "description": "Required fields: name, description, price, stock. Optional field: image",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "price",
                                    "stock"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Required. Name of the product",
                                        "type": "string",
                                        "example": "Shampoo"
                                    },
                                    "description": {
                                        "description": "Required. Description of the product",
                                        "type": "string",
                                        "example": "Something to wash your hair"
                                    },
                                    "price": {
                                        "description": "Required. Price of the product",
                                        "type": "number",
                                        "format": "float",
                                        "example": 9.99
                                    },
                                    "stock": {
                                        "description": "Required. Number of items in stock",
                                        "type": "integer",
                                        "example": 50
                                    },
                                    "image": {
                                        "description": "Optional. Image filename for the product",
                                        "type": "string",
                                        "example": "shampoo.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Product already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product already exists"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "description": "Returns a single product",
                "operationId": "b46f4aa73232d0368eee698a082342a4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to return",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update an existing product",
                "description": "Updates a product and returns the updated product details",
                "operationId": "1419d479f9340e30e67fe21a2ca525b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Shampoo"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description"
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 19.99
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "image": {
                                        "type": "string",
                                        "example": "updated-shampoo.jpg"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Soft delete a product",
                "description": "Marks a product as inactive (soft delete) instead of removing it from the database",
                "operationId": "fe34b364a3f192305598b65d04d06b5d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            }
        },
        "/services": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get all services",
                "description": "Returns list of all active services",
                "operationId": "1668f1b477351590ed9483fa8dbb1c0e",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Service"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No active services found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No services are active"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "description": "Creates a new service and returns the service details",
                "operationId": "025f26719e7eb513dc977be8039edd5e",
                "requestBody": {
                    "description": "Required fields: name, description, duration_phase_1. Optional fields: rest_duration, duration_phase_2",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "duration_phase_1"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Required. Name of the service",
                                        "type": "string",
                                        "example": "Haircut"
                                    },
                                    "description": {
                                        "description": "Required. Description of the service",
                                        "type": "string",
                                        "example": "Basic haircut service"
                                    },
                                    "duration_phase_1": {
                                        "description": "Required. Duration of phase 1 in minutes",
                                        "type": "integer",
                                        "example": 30
                                    },
                                    "rest_duration": {
                                        "description": "Optional. Rest duration in minutes",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "duration_phase_2": {
                                        "description": "Optional. Duration of phase 2 in minutes",
                                        "type": "integer",
                                        "example": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Service already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service already exists"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/services/all": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get all services (including inactive)",
                "description": "Returns list of all services regardless of active status",
                "operationId": "3fcc36cbe991a85deb8b3bd185fc37ce",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Service"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No services found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No services are found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get service by ID",
                "description": "Returns a single service",
                "operationId": "8379ca180448f06f172e894ed2ea5c87",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of service to return",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Update an existing service",
                "description": "Updates a service and returns the updated service details",
                "operationId": "0327b8719d91bf3647f2adb643bc349d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of service to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Haircut"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated haircut service"
                                    },
                                    "duration_phase_1": {
                                        "type": "integer",
                                        "example": 45
                                    },
                                    "rest_duration": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "duration_phase_2": {
                                        "type": "integer",
                                        "example": 15
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Service"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Delete a service",
                "description": "Deletes a service by changing active to 0",
                "operationId": "2aea7a971d60fde5e42729153bbeae75",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of service to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service deleted successfully"
                                        },
                                        "object": {
                                            "$ref": "#/components/schemas/Service"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/{serviceId}/categories": {
            "get": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Get all categories for a service",
                "description": "Get all categories for a service",
                "operationId": "75503f62a4dbee40c3f8cae85fc1687c",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ID of service",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of service categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Category Name"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services-with-categories": {
            "get": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Get all services with their associated categories",
                "operationId": "fa72f5bbdaf7f00e875c26f890327989",
                "responses": {
                    "200": {
                        "description": "List of services with their categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Service Name"
                                            },
                                            "categories": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Category Name"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/service-categories": {
            "get": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Get all categories that are associated with any services",
                "operationId": "b9447b51dc122feed362a6d0de383a0a",
                "responses": {
                    "200": {
                        "description": "List of category names used by services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "Category Name"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/{serviceId}/categories/sync": {
            "put": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Sync categories for a service",
                "description": "Sync categories for a service",
                "operationId": "cbff316061c8c54b68474ce31bd2d80b",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ID of service",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Add and remove categories. Send an array of category ids to add and/or change the current categories, send an empty array to remove all.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "categories"
                                ],
                                "properties": {
                                    "categories": {
                                        "description": "Array of category IDs. Send an empty array [] to remove all categories.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Categories synced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Categories synced successfully"
                                        },
                                        "service": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Service Name"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Service description"
                                                },
                                                "hairlength": {
                                                    "type": "string",
                                                    "example": "medium"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 99.99
                                                },
                                                "active": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "categories": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Category Name"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found or category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "categories.0": [
                                                    "The selected categories.0 is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error - Missing or invalid fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The categories field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "categories": [
                                                    "The categories field is required"
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a list of active users",
                "description": "Returns a list of all active users (status = 1)",
                "operationId": "getUsersList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "email": {
                                                "type": "string",
                                                "format": "email",
                                                "example": "john.doe@example.com"
                                            },
                                            "gender": {
                                                "type": "string",
                                                "enum": [
                                                    "male",
                                                    "female"
                                                ],
                                                "example": "male"
                                            },
                                            "telephone": {
                                                "type": "string",
                                                "example": "+31612345678"
                                            },
                                            "role": {
                                                "type": "string",
                                                "enum": [
                                                    "admin",
                                                    "user"
                                                ],
                                                "example": "user"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Creates a new user with the provided information and returns the created user details",
                "operationId": "createUser",
                "requestBody": {
                    "description": "User creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "john.doe@example.com"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "role": {
                                            "type": "string",
                                            "enum": [
                                                "admin",
                                                "user"
                                            ],
                                            "example": "user"
                                        },
                                        "profile_photo_url": {
                                            "type": "string",
                                            "example": "https://ui-avatars.com/api/?name=John+Doe&color=7F9CF5&background=EBF4FF"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Email already exists"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email has already been taken."
                                                ],
                                                "gender": [
                                                    "The selected gender is invalid."
                                                ],
                                                "role": [
                                                    "The selected role is invalid."
                                                ],
                                                "password": [
                                                    "The password must be at least 8 characters."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "description": "Returns a single user's details by their ID",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "john.doe@example.com"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "role": {
                                            "type": "string",
                                            "enum": [
                                                "admin",
                                                "user"
                                            ],
                                            "example": "user"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Soft delete a user",
                "description": "Soft deletes a user by setting their status to 0 (inactive)",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted (status changed to inactive)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User successfully deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user",
                "description": "Updates an existing user's information with the provided details. At least one field must be provided.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User update data - at least one field must be provided",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "0196df00-946c-7373-afef-4c7a76752aa3"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "testing23"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "john.doe34@example.com"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "role": {
                                            "type": "string",
                                            "enum": [
                                                "admin",
                                                "user"
                                            ],
                                            "example": "user"
                                        },
                                        "profile_photo_url": {
                                            "type": "string",
                                            "example": "https://ui-avatars.com/api/?name=t&color=7F9CF5&background=EBF4FF"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "At least one field to update must be provided"
                                                },
                                                "errors": {
                                                    "properties": {
                                                        "fields": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": "Please include at least one of: name, email, gender, telephone, role"
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "The email has already been taken"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "example": {
                                                        "email": [
                                                            "The email has already been taken."
                                                        ],
                                                        "gender": [
                                                            "The selected gender is invalid."
                                                        ],
                                                        "role": [
                                                            "The selected role is invalid."
                                                        ]
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Product": {
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "Shampoo"
                    },
                    "description": {
                        "type": "string",
                        "example": "Something to wash your hair"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 9.99
                    },
                    "stock": {
                        "type": "integer",
                        "example": 50
                    },
                    "image": {
                        "type": "string",
                        "example": "shampoo.jpg"
                    },
                    "active": {
                        "description": "1 for active product, 0 for inactive/deleted",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Service": {
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "Haircut"
                    },
                    "description": {
                        "type": "string",
                        "example": "Basic haircut service"
                    },
                    "duration_phase_1": {
                        "type": "integer",
                        "example": 30
                    },
                    "rest_duration": {
                        "type": "integer",
                        "example": 0
                    },
                    "duration_phase_2": {
                        "type": "integer",
                        "example": 0
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Category": {
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "description": "Category name (required)",
                        "type": "string",
                        "example": "Hair Care"
                    },
                    "description": {
                        "type": "string",
                        "example": "Hair care products"
                    },
                    "active": {
                        "description": "Category status: 1 for active, 0 for inactive/deleted (optional, default: 1)",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "pivot": {
                        "properties": {
                            "product_id": {
                                "type": "string",
                                "example": "123e4567-e89b-12d3-a456-426614174000"
                            },
                            "category_id": {
                                "type": "string",
                                "example": "123e4567-e89b-12d3-a456-426614174000"
                            },
                            "active": {
                                "description": "1 for active relationship, 0 for inactive",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "User": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "telephone": {
                        "type": "string",
                        "example": "+31612345678"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    },
                    "status": {
                        "description": "1 for active user, 0 for inactive/deleted",
                        "type": "integer",
                        "example": 1
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Booking": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-06-15T14:30:00Z"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "telephone": {
                        "type": "string",
                        "example": "+31612345678"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "remarks": {
                        "type": "string",
                        "example": "First time customer, prefers short haircut"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "confirmed",
                            "cancelled",
                            "completed"
                        ],
                        "example": "pending"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "user": {
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid",
                                "example": "123e4567-e89b-12d3-a456-426614174000"
                            },
                            "name": {
                                "type": "string",
                                "example": "John Doe"
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "example": "john.doe@example.com"
                            },
                            "telephone": {
                                "type": "string",
                                "example": "+31612345678"
                            }
                        },
                        "type": "object"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "BookingRequest": {
                "required": [
                    "date",
                    "name",
                    "email",
                    "telephone",
                    "gender",
                    "remarks",
                    "status",
                    "user_id"
                ],
                "properties": {
                    "date": {
                        "description": "Booking date and time (required)",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-06-15T14:30:00Z"
                    },
                    "name": {
                        "description": "Customer name (required)",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "Customer email (required)",
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "telephone": {
                        "description": "Customer telephone (required)",
                        "type": "string",
                        "example": "+31612345678"
                    },
                    "gender": {
                        "description": "Customer gender (required)",
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "remarks": {
                        "description": "Additional remarks (required)",
                        "type": "string",
                        "example": "First time customer, prefers short haircut"
                    },
                    "status": {
                        "description": "Booking status (required)",
                        "type": "string",
                        "enum": [
                            "pending",
                            "confirmed",
                            "cancelled",
                            "completed"
                        ],
                        "example": "pending"
                    },
                    "user_id": {
                        "description": "User ID (required)",
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                },
                "type": "object"
            },
            "BookingUpdateRequest": {
                "properties": {
                    "date": {
                        "description": "Booking date and time",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-06-15T14:30:00Z"
                    },
                    "name": {
                        "description": "Customer name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "Customer email",
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "telephone": {
                        "description": "Customer telephone",
                        "type": "string",
                        "example": "+31612345678"
                    },
                    "gender": {
                        "description": "Customer gender",
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "remarks": {
                        "description": "Additional remarks",
                        "type": "string",
                        "example": "First time customer, prefers short haircut"
                    },
                    "status": {
                        "description": "Booking status",
                        "type": "string",
                        "enum": [
                            "pending",
                            "confirmed",
                            "cancelled",
                            "completed"
                        ],
                        "example": "confirmed"
                    },
                    "user_id": {
                        "description": "User ID",
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                },
                "type": "object"
            },
            "UserRequest": {
                "required": [
                    "name",
                    "email",
                    "gender",
                    "telephone",
                    "password"
                ],
                "properties": {
                    "name": {
                        "description": "User's full name (required)",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "User's email address (required, must be unique)",
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "gender": {
                        "description": "User's gender (required)",
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "telephone": {
                        "description": "User's telephone number (required)",
                        "type": "string",
                        "example": "+31612345678"
                    },
                    "password": {
                        "description": "User's password (required, min 8 characters)",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    },
                    "role": {
                        "description": "User's role (optional, default: user)",
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    }
                },
                "type": "object"
            },
            "UserUpdateRequest": {
                "properties": {
                    "name": {
                        "description": "User's full name (optional)",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "User's email address (optional, must be unique)",
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "gender": {
                        "description": "User's gender (optional)",
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "example": "male"
                    },
                    "telephone": {
                        "description": "User's telephone number (optional)",
                        "type": "string",
                        "example": "+31612345678"
                    },
                    "role": {
                        "description": "User's role (optional)",
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "user"
                    }
                },
                "type": "object"
            },
            "Error": {
                "properties": {
                    "error": {
                        "type": "string",
                        "example": "User not found"
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Categories",
            "description": "API Endpoints for managing categories"
        },
        {
            "name": "Product Categories",
            "description": "API Endpoints for managing product categories relationships"
        },
        {
            "name": "Products",
            "description": "Product management endpoints"
        },
        {
            "name": "Services",
            "description": "Service management endpoints"
        },
        {
            "name": "Users",
            "description": "User management endpoints"
        },
        {
            "name": "Bookings",
            "description": "Booking management endpoints"
        },
        {
            "name": "Service Categories",
            "description": "Service Categories"
        }
    ]
}