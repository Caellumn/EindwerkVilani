{
    "openapi": "3.0.0",
    "info": {
        "title": "Kapsalon Vilani API",
        "description": "API for managing salon users, services, and appointments",
        "version": "1.0.0"
    },
    "paths": {
        "/api/bookings": {
            "get": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Get bookings with optional filtering",
                "description": "Returns a list of bookings with optional filtering by date, name, gender, and status",
                "operationId": "getBookings",
                "parameters": [
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter by year",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 2024
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "description": "Filter by month (1-12)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 12
                        }
                    },
                    {
                        "name": "day",
                        "in": "query",
                        "description": "Filter by day (1-31)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 25
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by name (partial match)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "John"
                        }
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Filter by gender",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "male",
                                "female"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by booking status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "confirmed",
                                "cancelled",
                                "completed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "date": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2024-12-25 10:00:00"
                                            },
                                            "end_time": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2024-12-25 11:00:00"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "email": {
                                                "type": "string",
                                                "example": "john@example.com"
                                            },
                                            "telephone": {
                                                "type": "string",
                                                "example": "+31612345678"
                                            },
                                            "gender": {
                                                "type": "string",
                                                "enum": [
                                                    "male",
                                                    "female"
                                                ],
                                                "example": "male"
                                            },
                                            "remarks": {
                                                "type": "string",
                                                "example": "First time customer"
                                            },
                                            "status": {
                                                "type": "string",
                                                "enum": [
                                                    "pending",
                                                    "confirmed",
                                                    "cancelled",
                                                    "completed"
                                                ],
                                                "example": "confirmed"
                                            },
                                            "user_id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "nullable": true
                                            },
                                            "service_id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "nullable": true
                                            },
                                            "user": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "email": {
                                                        "type": "string"
                                                    },
                                                    "telephone": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid filter parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "gender needs to be male or female"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking",
                "description": "Creates a new booking with overlap detection and automatic end time calculation",
                "operationId": "createBooking",
                "requestBody": {
                    "description": "Booking creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "date",
                                    "name",
                                    "email",
                                    "telephone",
                                    "gender",
                                    "remarks",
                                    "status"
                                ],
                                "properties": {
                                    "date": {
                                        "description": "Booking start time (must be in the future). Also accepts format: 2024-12-25 10h00m",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-12-25 10:00:00"
                                    },
                                    "name": {
                                        "description": "Customer name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "example": "+31612345678"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female"
                                        ],
                                        "example": "male"
                                    },
                                    "remarks": {
                                        "type": "string",
                                        "example": "First time customer"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "confirmed",
                                            "cancelled",
                                            "completed"
                                        ],
                                        "example": "pending"
                                    },
                                    "user_id": {
                                        "description": "Optional existing user ID",
                                        "type": "string",
                                        "format": "uuid",
                                        "nullable": true
                                    },
                                    "service_id": {
                                        "description": "Optional service ID (for automatic end time calculation)",
                                        "type": "string",
                                        "format": "uuid",
                                        "nullable": true
                                    },
                                    "end_time": {
                                        "description": "Optional end time (auto-calculated if service_id provided)",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-12-25 11:00:00",
                                        "nullable": true
                                    },
                                    "force_create": {
                                        "description": "Set to true to bypass overlap warnings",
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "date": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 10:00:00"
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 11:00:00"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john@example.com"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "example": "male"
                                        },
                                        "remarks": {
                                            "type": "string",
                                            "example": "First time customer"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "pending"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Booking overlap detected",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "warning": {
                                            "type": "string",
                                            "example": "overlapping_booking"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This booking overlaps with existing bookings for the same gender."
                                        },
                                        "overlapping_bookings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "start_time": {
                                                        "type": "string",
                                                        "example": "10:00"
                                                    },
                                                    "end_time": {
                                                        "type": "string",
                                                        "example": "11:00"
                                                    },
                                                    "date": {
                                                        "type": "string",
                                                        "example": "25-12-2024"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "continue_anyway": {
                                            "type": "boolean",
                                            "example": false
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "date": [
                                                    "The date must be a date after or equal to now."
                                                ],
                                                "email": [
                                                    "The email must be a valid email address."
                                                ],
                                                "gender": [
                                                    "The selected gender is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while creating the booking."
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/{id}": {
            "get": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Get booking by ID",
                "description": "Returns a single booking with user details",
                "operationId": "getBookingById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of booking to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "date": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 10:00:00"
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 11:00:00"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john@example.com"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "remarks": {
                                            "type": "string",
                                            "example": "First time customer"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "pending",
                                                "confirmed",
                                                "cancelled",
                                                "completed"
                                            ],
                                            "example": "confirmed"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "nullable": true
                                        },
                                        "service_id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "nullable": true
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "telephone": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Update an existing booking",
                "description": "Updates a booking with validation. At least one field must be provided.",
                "operationId": "updateBooking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of booking to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "date": {
                                        "description": "Booking start time (must be in the future)",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-12-25 10:00:00"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe Updated"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.updated@example.com"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "example": "+31612345679"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female"
                                        ],
                                        "example": "male"
                                    },
                                    "remarks": {
                                        "type": "string",
                                        "example": "Updated remarks"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "confirmed",
                                            "cancelled",
                                            "completed"
                                        ],
                                        "example": "confirmed"
                                    },
                                    "user_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "nullable": true
                                    },
                                    "end_time": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-12-25 11:00:00",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Booking updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "date": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 10:00:00"
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 11:00:00"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe Updated"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john.updated@example.com"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345679"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "example": "male"
                                        },
                                        "remarks": {
                                            "type": "string",
                                            "example": "Updated remarks"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "confirmed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking or User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "At least one field to update must be provided"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "fields": [
                                                    "Please include at least one of: date, name, email, telephone, gender, remarks, status, end_time"
                                                ],
                                                "date": [
                                                    "The date must be a date after or equal to now."
                                                ],
                                                "email": [
                                                    "The email must be a valid email address."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Cancel a booking",
                "description": "Soft deletes a booking by setting status to 'cancelled'",
                "operationId": "cancelBooking",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of booking to cancel",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Booking cancelled successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/full-store": {
            "post": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking with products and/or services",
                "description": "Creates a new booking with overlap detection and attaches products and/or services. At least one product or service must be provided.",
                "operationId": "fullStoreBooking",
                "requestBody": {
                    "description": "Booking creation data with products and/or services",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "date",
                                    "name",
                                    "email",
                                    "telephone",
                                    "gender",
                                    "remarks",
                                    "status"
                                ],
                                "properties": {
                                    "date": {
                                        "description": "Booking start time (must be in the future). Also accepts format: 2024-12-25 10h00m",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-12-25 10:00:00"
                                    },
                                    "name": {
                                        "description": "Customer name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "example": "+31612345678"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female"
                                        ],
                                        "example": "male"
                                    },
                                    "remarks": {
                                        "type": "string",
                                        "example": "First time customer"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "confirmed",
                                            "cancelled",
                                            "completed"
                                        ],
                                        "example": "pending"
                                    },
                                    "user_id": {
                                        "description": "Optional existing user ID",
                                        "type": "string",
                                        "format": "uuid",
                                        "nullable": true
                                    },
                                    "end_time": {
                                        "description": "Optional end time (auto-calculated if services provided)",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-12-25 11:00:00",
                                        "nullable": true
                                    },
                                    "force_create": {
                                        "description": "Set to true to bypass overlap warnings",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "services": {
                                        "description": "Array of service IDs. At least one service or product must be provided.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    },
                                    "products": {
                                        "description": "Array of product IDs. At least one service or product must be provided.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174002",
                                            "123e4567-e89b-12d3-a456-426614174003"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully with products and/or services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "date": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 10:00:00"
                                        },
                                        "end_time": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-25 11:00:00"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john@example.com"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "example": "male"
                                        },
                                        "remarks": {
                                            "type": "string",
                                            "example": "First time customer"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "pending"
                                        },
                                        "services": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Booking overlap detected",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "warning": {
                                            "type": "string",
                                            "example": "overlapping_booking"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This booking overlaps with existing bookings for the same gender."
                                        },
                                        "overlapping_bookings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "start_time": {
                                                        "type": "string",
                                                        "example": "10:00"
                                                    },
                                                    "end_time": {
                                                        "type": "string",
                                                        "example": "11:00"
                                                    },
                                                    "date": {
                                                        "type": "string",
                                                        "example": "25-12-2024"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "continue_anyway": {
                                            "type": "boolean",
                                            "example": false
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "date": [
                                                    "The date must be a date after or equal to now."
                                                ],
                                                "email": [
                                                    "The email must be a valid email address."
                                                ],
                                                "services_or_products": [
                                                    "At least one service or product must be provided."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while creating the booking."
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/{bookingId}/products": {
            "get": {
                "tags": [
                    "Booking Products"
                ],
                "summary": "Get products for a specific booking",
                "description": "Returns a list of products associated with a specific booking",
                "operationId": "getProductsByBooking",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of booking to get products for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Hair Shampoo"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings-with-products": {
            "get": {
                "tags": [
                    "Booking Products"
                ],
                "summary": "Get all bookings with their associated products",
                "description": "Returns a list of all bookings with their associated products (id and name only)",
                "operationId": "getBookingsWithProducts",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe Appointment"
                                            },
                                            "products": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "format": "uuid",
                                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Hair Shampoo"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/{bookingId}/products/sync": {
            "put": {
                "tags": [
                    "Booking Products"
                ],
                "summary": "Sync products for a booking",
                "description": "Replace all current products associated with a booking with the provided set. Send empty array to remove all products.",
                "operationId": "syncBookingProducts",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of booking to sync products for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Array of product IDs to associate with the booking",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "products"
                                ],
                                "properties": {
                                    "products": {
                                        "description": "Array of product IDs. Send empty array [] to remove all products.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Products synced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Products synced successfully"
                                        },
                                        "booking": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "products": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "format": "uuid",
                                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Hair Shampoo"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The products field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "products": [
                                                    "The products field is required"
                                                ],
                                                "products.0": [
                                                    "The selected products.0 is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/booking-products": {
            "get": {
                "tags": [
                    "Booking Products"
                ],
                "summary": "Get all products used in bookings",
                "description": "Returns a list of product names that are associated with at least one booking",
                "operationId": "getProductsUsedInBookings",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "Hair Shampoo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/{bookingId}/services": {
            "get": {
                "tags": [
                    "Booking Services"
                ],
                "summary": "Get services for a specific booking",
                "description": "Returns a list of services associated with a specific booking",
                "operationId": "getServicesByBooking",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of booking to get services for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Haircut"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings-with-services": {
            "get": {
                "tags": [
                    "Booking Services"
                ],
                "summary": "Get all bookings with their associated services",
                "description": "Returns a list of all bookings with their associated services (id and name only)",
                "operationId": "getBookingsWithServices",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe Appointment"
                                            },
                                            "services": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "format": "uuid",
                                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Haircut"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/bookings/{bookingId}/services/sync": {
            "put": {
                "tags": [
                    "Booking Services"
                ],
                "summary": "Sync services for a booking",
                "description": "Replace all current services associated with a booking with the provided set. Send empty array to remove all services. Also recalculates booking end time based on total service duration.",
                "operationId": "syncBookingServices",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of booking to sync services for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Array of service IDs to associate with the booking",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "services"
                                ],
                                "properties": {
                                    "services": {
                                        "description": "Array of service IDs. Send empty array [] to remove all services.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Services synced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Services synced successfully"
                                        },
                                        "booking": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "services": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "format": "uuid",
                                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Haircut"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Booking not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The services field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "services": [
                                                    "The services field is required"
                                                ],
                                                "services.0": [
                                                    "The selected services.0 is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/booking-services": {
            "get": {
                "tags": [
                    "Booking Services"
                ],
                "summary": "Get all services used in bookings",
                "description": "Returns a list of service names that are associated with at least one booking",
                "operationId": "getServicesUsedInBookings",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "Haircut"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "description": "Returns a list of all categories",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Hair Care"
                                            },
                                            "active": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No categories found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No categories were found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Creates a new category with validation",
                "operationId": "createCategory",
                "requestBody": {
                    "description": "Category creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Category name (must be unique)",
                                        "type": "string",
                                        "example": "Hair Care"
                                    },
                                    "active": {
                                        "description": "Active status (optional, defaults to true)",
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Hair Care"
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required.",
                                                    "The name has already been taken."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get category by ID",
                "description": "Returns a single category",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Hair Care"
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update an existing category",
                "description": "Updates a category with validation",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Hair Care"
                                    },
                                    "active": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Updated Hair Care"
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name has already been taken."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Soft delete a category",
                "description": "Soft deletes a category by setting active to 0",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully (No Content)"
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{productId}/categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all categories for a product",
                "description": "Returns a list of categories associated with a specific product",
                "operationId": "getProductCategories",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "ID of product to get categories for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of product categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Hair Care"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{productId}/categories/sync": {
            "put": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Sync categories for a product",
                "description": "Replace all current categories associated with a product with the provided set. Send empty array to remove all categories.",
                "operationId": "syncProductCategories",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "ID of product to sync categories for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Array of category IDs to associate with the product",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "categories"
                                ],
                                "properties": {
                                    "categories": {
                                        "description": "Array of category IDs. Send empty array [] to remove all categories.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Categories synced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Categories synced successfully"
                                        },
                                        "product": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Hair Shampoo"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Professional hair shampoo"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 19.99
                                                },
                                                "stock": {
                                                    "type": "integer",
                                                    "example": 50
                                                },
                                                "categories": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "format": "uuid",
                                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Hair Care"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error - Missing or invalid fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The categories field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "categories": [
                                                    "The categories field is required"
                                                ],
                                                "categories.0": [
                                                    "The selected categories.0 is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products-with-categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all products with their associated categories",
                "description": "Returns a list of all products with their associated categories (id and name only)",
                "operationId": "getProductsWithCategories",
                "responses": {
                    "200": {
                        "description": "List of products with their categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Hair Shampoo"
                                            },
                                            "categories": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "format": "uuid",
                                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Hair Care"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/product-categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all categories used by products",
                "description": "Returns a list of category names that are associated with at least one product",
                "operationId": "getUsedProductCategories",
                "responses": {
                    "200": {
                        "description": "List of category names used by products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "Hair Care"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all active products",
                "description": "Returns a paginated list of active products (max 20 per page)",
                "operationId": "getProducts",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid",
                                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Shampoo"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Professional hair shampoo"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 19.99
                                                    },
                                                    "stock": {
                                                        "type": "integer",
                                                        "example": 50
                                                    },
                                                    "image": {
                                                        "type": "string",
                                                        "example": "https://cloudinary.com/image.jpg",
                                                        "nullable": true
                                                    },
                                                    "active": {
                                                        "type": "integer",
                                                        "example": 1
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string",
                                                    "example": "http://example.com/api/products?page=1"
                                                },
                                                "last": {
                                                    "type": "string",
                                                    "example": "http://example.com/api/products?page=10"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "example": "http://example.com/api/products?page=1",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string",
                                                    "example": "http://example.com/api/products?page=3",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 21
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 20
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 40
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 200
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Creates a new product and returns the product details",
                "operationId": "createProduct",
                "requestBody": {
                    "description": "Product creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "price",
                                    "stock"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Shampoo"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Professional hair shampoo"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 19.99
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 50
                                    },
                                    "image": {
                                        "type": "string",
                                        "example": "https://cloudinary.com/image.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Shampoo"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Professional hair shampoo"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 19.99
                                        },
                                        "stock": {
                                            "type": "integer",
                                            "example": 50
                                        },
                                        "image": {
                                            "type": "string",
                                            "example": "https://cloudinary.com/image.jpg",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Product already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product already exists"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "description": "Returns a single product",
                "operationId": "getProductById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Shampoo"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Professional hair shampoo"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 19.99
                                        },
                                        "stock": {
                                            "type": "integer",
                                            "example": 50
                                        },
                                        "image": {
                                            "type": "string",
                                            "example": "https://cloudinary.com/image.jpg",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update an existing product",
                "description": "Updates a product and returns the updated product details",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Shampoo"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 21.99
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 75
                                    },
                                    "image": {
                                        "type": "string",
                                        "example": "https://cloudinary.com/new-image.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Updated Shampoo"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Updated description"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 21.99
                                        },
                                        "stock": {
                                            "type": "integer",
                                            "example": 75
                                        },
                                        "image": {
                                            "type": "string",
                                            "example": "https://cloudinary.com/new-image.jpg",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Soft delete a product",
                "description": "Soft deletes a product by setting active to 0",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            }
        },
        "/products/upload": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Show product image upload form",
                "description": "Returns the upload form view (web interface)",
                "operationId": "showUploadForm",
                "responses": {
                    "200": {
                        "description": "Upload form view",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Upload product image to Cloudinary",
                "description": "Uploads an image file to Cloudinary and updates the product's image URL",
                "operationId": "storeUploads",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file",
                                    "product_id"
                                ],
                                "properties": {
                                    "file": {
                                        "description": "Image file (jpeg, png, jpg, gif, max 2MB)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "product_id": {
                                        "description": "ID of existing product to update",
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "302": {
                        "description": "Redirect back with success message"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "file": [
                                                    "The file must be an image."
                                                ],
                                                "product_id": [
                                                    "The selected product_id is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get all active services",
                "description": "Returns a list of all active services (active = 1)",
                "operationId": "getActiveServices",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Haircut"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Professional haircut service"
                                            },
                                            "hairlength": {
                                                "type": "string",
                                                "example": "short"
                                            },
                                            "price": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 25
                                            },
                                            "time": {
                                                "type": "integer",
                                                "example": 30,
                                                "nullable": true
                                            },
                                            "active": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No active services found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No services are active"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "description": "Creates a new service and optionally associates it with categories",
                "operationId": "createService",
                "requestBody": {
                    "description": "Service creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "hairlength",
                                    "price"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Haircut"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Professional haircut service"
                                    },
                                    "hairlength": {
                                        "description": "Hair length category",
                                        "type": "string",
                                        "example": "short"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 25
                                    },
                                    "categories": {
                                        "description": "Optional array of category IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Haircut"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Professional haircut service"
                                        },
                                        "hairlength": {
                                            "type": "string",
                                            "example": "short"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 25
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Service already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service already exists"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/all": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get all services",
                "description": "Returns a list of all services regardless of active status",
                "operationId": "getAllServices",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Haircut"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Professional haircut service"
                                            },
                                            "hairlength": {
                                                "type": "string",
                                                "example": "short"
                                            },
                                            "price": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 25
                                            },
                                            "time": {
                                                "type": "integer",
                                                "example": 30,
                                                "nullable": true
                                            },
                                            "active": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No services found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No services are found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/{id}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get service by ID",
                "description": "Returns a single service",
                "operationId": "getServiceById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of service to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Haircut"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Professional haircut service"
                                        },
                                        "hairlength": {
                                            "type": "string",
                                            "example": "short"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 25
                                        },
                                        "time": {
                                            "type": "integer",
                                            "example": 30,
                                            "nullable": true
                                        },
                                        "active": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Update an existing service",
                "description": "Updates a service and optionally syncs its categories",
                "operationId": "updateService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of service to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Haircut"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description"
                                    },
                                    "hairlength": {
                                        "type": "string",
                                        "example": "medium"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 30
                                    },
                                    "categories": {
                                        "description": "Optional array of category IDs to sync",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Updated Haircut"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Updated description"
                                        },
                                        "hairlength": {
                                            "type": "string",
                                            "example": "medium"
                                        },
                                        "price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 30
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Soft delete a service",
                "description": "Soft deletes a service by setting active to 0",
                "operationId": "deleteService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of service to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service 'Haircut' deleted successfully"
                                        },
                                        "object": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Haircut"
                                                },
                                                "active": {
                                                    "type": "integer",
                                                    "example": 0
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/{serviceId}/categories": {
            "get": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Get all categories for a service",
                "description": "Get all categories for a service",
                "operationId": "75503f62a4dbee40c3f8cae85fc1687c",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ID of service",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of service categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Category Name"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services-with-categories": {
            "get": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Get all services with their associated categories",
                "operationId": "fa72f5bbdaf7f00e875c26f890327989",
                "responses": {
                    "200": {
                        "description": "List of services with their categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Service Name"
                                            },
                                            "categories": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Category Name"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/service-categories": {
            "get": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Get all categories that are associated with any services",
                "operationId": "b9447b51dc122feed362a6d0de383a0a",
                "responses": {
                    "200": {
                        "description": "List of category names used by services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "Category Name"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/{serviceId}/categories/sync": {
            "put": {
                "tags": [
                    "Service Categories"
                ],
                "summary": "Sync categories for a service",
                "description": "Replace all current categories associated with a service with the provided set. Send empty array to remove all categories.",
                "operationId": "syncServiceCategories",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ID of service to sync categories for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Array of category IDs to associate with the service",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "categories"
                                ],
                                "properties": {
                                    "categories": {
                                        "description": "Array of category IDs. Send empty array [] to remove all categories.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "example": [
                                            "123e4567-e89b-12d3-a456-426614174000",
                                            "123e4567-e89b-12d3-a456-426614174001"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Categories synced successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Categories synced successfully"
                                        },
                                        "service": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Haircut"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Professional haircut service"
                                                },
                                                "hairlength": {
                                                    "type": "string",
                                                    "example": "medium"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 25
                                                },
                                                "active": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "categories": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "format": "uuid",
                                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Hair Care"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error - Missing or invalid fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The categories field is required"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "categories": [
                                                    "The categories field is required"
                                                ],
                                                "categories.0": [
                                                    "The selected categories.0 is invalid."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a list of active users",
                "description": "Returns a list of all active users (status = 1)",
                "operationId": "getUsersList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "email": {
                                                "type": "string",
                                                "format": "email",
                                                "example": "john.doe@example.com"
                                            },
                                            "gender": {
                                                "type": "string",
                                                "enum": [
                                                    "male",
                                                    "female"
                                                ],
                                                "example": "male"
                                            },
                                            "telephone": {
                                                "type": "string",
                                                "example": "+31612345678"
                                            },
                                            "role": {
                                                "type": "string",
                                                "enum": [
                                                    "admin",
                                                    "user"
                                                ],
                                                "example": "user"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Creates a new user with the provided information and returns the created user details",
                "operationId": "createUser",
                "requestBody": {
                    "description": "User creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "gender",
                                    "telephone",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female"
                                        ],
                                        "example": "male"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "example": "+31612345678"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    },
                                    "role": {
                                        "description": "Optional field",
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "user"
                                        ],
                                        "example": "user"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "john.doe@example.com"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "role": {
                                            "type": "string",
                                            "enum": [
                                                "admin",
                                                "user"
                                            ],
                                            "example": "user"
                                        },
                                        "profile_photo_url": {
                                            "type": "string",
                                            "example": "https://ui-avatars.com/api/?name=John+Doe&color=7F9CF5&background=EBF4FF"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Email already exists"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email has already been taken."
                                                ],
                                                "gender": [
                                                    "The selected gender is invalid."
                                                ],
                                                "role": [
                                                    "The selected role is invalid."
                                                ],
                                                "password": [
                                                    "The password must be at least 8 characters."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "description": "Returns a single user's details by their ID",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to return",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "john.doe@example.com"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "role": {
                                            "type": "string",
                                            "enum": [
                                                "admin",
                                                "user"
                                            ],
                                            "example": "user"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Soft delete a user",
                "description": "Soft deletes a user by setting their status to 0 (inactive)",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted (status changed to inactive)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User successfully deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user",
                "description": "Updates an existing user's information with the provided details. At least one field must be provided.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User update data - at least one field must be provided",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Optional",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "description": "Optional",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "gender": {
                                        "description": "Optional",
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female"
                                        ],
                                        "example": "male"
                                    },
                                    "telephone": {
                                        "description": "Optional",
                                        "type": "string",
                                        "example": "+31612345678"
                                    },
                                    "role": {
                                        "description": "Optional",
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "user"
                                        ],
                                        "example": "user"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "0196df00-946c-7373-afef-4c7a76752aa3"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "testing23"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "john.doe34@example.com"
                                        },
                                        "gender": {
                                            "type": "string",
                                            "enum": [
                                                "male",
                                                "female"
                                            ],
                                            "example": "male"
                                        },
                                        "telephone": {
                                            "type": "string",
                                            "example": "+31612345678"
                                        },
                                        "role": {
                                            "type": "string",
                                            "enum": [
                                                "admin",
                                                "user"
                                            ],
                                            "example": "user"
                                        },
                                        "profile_photo_url": {
                                            "type": "string",
                                            "example": "https://ui-avatars.com/api/?name=t&color=7F9CF5&background=EBF4FF"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "At least one field to update must be provided"
                                                },
                                                "errors": {
                                                    "properties": {
                                                        "fields": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": "Please include at least one of: name, email, gender, telephone, role"
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "The email has already been taken"
                                                },
                                                "errors": {
                                                    "type": "object",
                                                    "example": {
                                                        "email": [
                                                            "The email has already been taken."
                                                        ],
                                                        "gender": [
                                                            "The selected gender is invalid."
                                                        ],
                                                        "role": [
                                                            "The selected role is invalid."
                                                        ]
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Bookings",
            "description": "Bookings"
        },
        {
            "name": "Booking Products",
            "description": "Booking Products"
        },
        {
            "name": "Booking Services",
            "description": "Booking Services"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Product Categories",
            "description": "Product Categories"
        },
        {
            "name": "Products",
            "description": "Products"
        },
        {
            "name": "Services",
            "description": "Services"
        },
        {
            "name": "Service Categories",
            "description": "Service Categories"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ]
}